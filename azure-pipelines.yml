name: "$(SourceBranchName)+$(BuildID)"

resources:
    repositories:
        - repository: utils
          type: github
          name: NHSDigital/api-management-utils
          endpoint: NHSDigital

trigger:
    branches:
        include:
            - tags/refs/v*
    tags:
        include:
            - v*

pr:
    branches:
        include: ['*']

jobs:
    - job: build
      displayName: Build & Test
      timeoutInMinutes: 10
      pool:
          vmImage: 'ubuntu-latest'
      variables:
          API_TEST_ENV_FILE_PATH: "tests/e2e/environments/local.postman_environment.json"
          PIP_CACHE_DIR: ".poetry"
      steps:
          - checkout: self
            path: s

          - checkout: utils
            path: s/utils

          - bash: echo "##vso[task.setvariable variable=BRANCH_NAME]`echo $(System.PullRequest.SourceBranch) | sed -r 's/[/|\\@":<>?*]+/-/g'`"
            displayName: Set and replace invalid characters in branch name

          - bash: 'echo "##vso[build.updatebuildnumber]$(BRANCH_NAME)+$(Build.BuildID)"'
            condition: eq(variables['Build.SourceBranchName'], 'merge')
            displayName: Update build ID if this is a pull request

          - task: UsePythonVersion@0
            displayName: "Use Python 3.8"
            inputs:
                versionSpec: "3.8"

          - bash: "sudo apt update && sudo apt-get install --yes default-jre default-jdk nodejs"
            displayName: Install apt dependencies

          - bash: "python -m pip install --upgrade pip setuptools wheel && pip install poetry"
            displayName: Install python dependencies


          # - task: Cache@2
          #   displayName: "Cache Python Dependencies"
          #   inputs:
          #       key: '"$(Agent.OS)" | "python" | poetry.lock'
          #       path: ".poetry"
          #       restoreKeys: |
          #           "$(Agent.OS)" | "python" | poetry.lock
          #           "$(Agent.OS)" | "pythons"

          # - task: Cache@2
          #   displayName: "Cache Package NPM Dependencies"
          #   inputs:
          #       key: '"$(Agent.OS)" | "node" | package-lock.json'
          #       path: "node_modules"
          #       restoreKeys: |
          #           "$(Agent.OS)" | "node" | package-lock.json
          #           "$(Agent.OS)" | "node"

          # - task: Cache@2
          #   displayName: "Cache Sandbox NPM Dependencies"
          #   inputs:
          #       key: '"$(Agent.OS)" | "node-sandbox" | docker/mesh-api-sandbox/package-lock.json'
          #       path: "sandbox/node_modules"
          #       restoreKeys: |
          #           "$(Agent.OS)" | "node-sandbox" | docker/mesh-api-sandbox/package-lock.json
          #           "$(Agent.OS)" | "node-sandbox"
  
          - bash: "make install"
            displayName: Install repo

          - bash: "make sandbox &"
            displayName: Start Sandbox Server

          - bash: "make check-licenses"
            displayName: Check licenses
     
          - bash: "make lint"
            displayName: Lint

          - bash: "make publish"
            displayName: Compile Spec

          - bash: 'echo "##vso[task.setvariable variable=SPEC_VERSION]$(poetry run python scripts/calculate_version.py)"'
            displayName: Set SPEC_VERSION

          # - bash: "make test"
          #   displayName: Run Tests

          - bash: "make release"
            displayName: Build Release Package

          - bash: "cp proxies dist/proxies"
            displayName: copy proxies

          - bash: "cp ecs-proxies-deploy.yml dist/ecs-deploy-all.yml"
            displayName: copy proxies deployment config

          - template: azure/build-prereqs.yml@utils

          - template: azure/create-build-env-vars.yml@utils
            parameters:
                out_dir: 'dist'
                service_name: 'mesh-api'

          - template: azure/become-build-user.yml@utils
            parameters:
                env_vars_dir: 'dist'

          - template: azure/build-and-push-ecs-proxies.yml@utils
            parameters:
                env_vars_dir: 'dist'

          # - task: PublishTestResults@2
          #   inputs:
          #       testResultsFormat: 'JUnit'
          #       testResultsFiles: 'newman/*.xml'
          #       failTaskOnFailedTests: true

          - publish: dist/
            artifact: mesh-api-$(SPEC_VERSION)+$(Build.BuildNumber)
