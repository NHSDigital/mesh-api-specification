info:
  contact:
    email: ssd.nationalservicedesk@nhs.net
    name: National Service Desk
  description: |
    ## Overview

    You interact with MESH by making calls to this API from your application.

    With the API, you can:
    
    - check the number of messages in your inbox
    - send a message, or a larger message as series of chunks
    - download a message, or a larger message which was sent to you as a series of chunks
    - acknowledge the successful download of a message, which removes it from your inbox
    - get the identifiers of messages in your inbox that are ready for download
    - track the status of messages that you sent from your outbox
    - look up the mailbox of an organisation you want to send data to
    - validate your mailbox every 24 hours to let Spine know it's still active

    ## Who can use this API

    This API can only be used where there is a legal basis to do so. We'll ask you to demonstrate this as part of the digital onboarding process before your software goes live.

    ## Requirements for using this API
    There are 2 parts to getting the MESH API, these are:
    
    1. developing and integrating your software
    2. getting your software approved to go live

    ### 1. Developing and integrating your software

    You'll need some things at different stages of your development to integrate with the MESH API.
    For each environment you use, you'll need a:
    - MESH mailbox ID and password
    - Transport Layer Security (TLS) certificate
    - shared secret to include in the MESH authorization header
    
    ### 2. Getting your software approved to go live
    
    This is also called digital onboarding. You'll need to submit information that demonstrates:
    - you have a valid use case
    - you can manage risks
    - your software conforms technically with the requirements for this API

    ## End-to-end process to integrate with MESH API

    The length of time it takes to get your software live depends on the resources your organisation puts into:
    - developing your software
    - getting things you need for your integration like TLS certificates
    - completing onboarding processes and waiting for approval
    
    You can do some things while you wait, but expect the end-to-end integration process to take 1 month or more.
    
    ### Versioning
  
    MESH API now has BETA support for versioning on certain endpoints in order to allow us to safely make new features and capabilities available to API consumers. For information on how to call a versioned API endpoint see [API Versioning](#section/API-Versioning).

    ### Get started
    
    To get started, sign in or create a developer account for digital onboarding, complete the 'Setup and eligibility' section and submit it.

    If you're new to digital onboarding, add your product and select 'MESH' from the 'APIs to be used' list.
    Submitting this information shows us that you have a legal basis to use the MESH API. We'll review the information you submit and respond within 5 to 10 working days.

    If we approve your request to use the MESH API, we'll also email you a supplier pack within 10 working days. Read through this as it contains the testing requirements you'll need to fulfil later on.

    You should get your use case approved before you go too far with development. You can choose to proceed with your integration while you wait for approval, but you'll be doing this at your own risk.
    
     [Sign in or create a developer account for digital onboarding](https://onboarding.prod.api.platform.nhs.uk)
    

    You will receive a response within 10 working days.

    If you have been approved to use the MESH API, our assurance team will contact you via email with a supplier pack containing the testing requirements you will need to fulfill. You will work alongside this team to get your solution assured.

    ### Request a mailbox

    Once we've approved your request to use the MESH API, you'll need to request a MESH Mailbox to use in a 'Path to Live integration environment'. This is how you'll interact with the MESH API. A MESH Mailbox is secure and only your organisation can access it.

    To request a MESH Mailbox, you'll need to fill in an online form. It takes 5 to 10 minutes to complete.

    You'll need to know:
    - your [ODS code](https://odsportal.digital.nhs.uk/)
    - the [workflow groups or IDs](https://digital.nhs.uk/services/message-exchange-for-social-care-and-health-mesh/workflow-groups-and-workflow-ids) for the files you plan to send or receive
    - the contact details of the person who will be managing the mailbox in your organisation
    
    [Request a 'Path to Live integration' MESH Mailbox](https://digital.nhs.uk/services/message-exchange-for-social-care-and-health-mesh/messaging-exchange-for-social-care-and-health-apply-for-a-mailbox)
    
    ### Receive your credentials for the 'Path to Live integration' environment

    Once you've requested a MESH Mailbox, we will email you your Mailbox ID and password within 5 working days. Keep these details safe as we'll also ask you for this if you need help from our support teams.

    You will also receive the shared secret. You'll need to include this in the [MESH authorization header](https://digital.nhs.uk/developer/api-catalogue/message-exchange-for-social-care-and-health-api#api-description__mesh-authorization-header) when you develop this part of your software.
    
    ### Get a TLS certificate

    You'll need a TLS certificate to establish a secure connection to MESH.
    
    How to get a TLS certificate
    
    1. Generate a private key using your preferred method, with the naming convention cn=mailboxid.odscode.api.mesh-client.nhs.uk
    2. Generate a certificate signing request (CSR) based on the private key and your Mailbox ID.
    3. Email the CSR to [itoc.supportdesk@nhs.net](mailto:itoc.supportdesk@nhs.net) - this needs to contain the common name from your CSR 'Subject' using the format local_id.ods_code.api.mesh-client.nhs.uk

    The local_id is a local identifier such as a server name and ods_code is your ODS code, for example, SERVER001.X26.api.mesh-client.nhs.uk.

    Once we receive your CSR, we'll send you a TLS certificate within 5 working days.

    Depending on how you implement MESH API, you may also need to [download a RootCA and SubCA certificate](https://digital.nhs.uk/services/path-to-live-environments/integration-environment#rootca-and-subca-certificates). These are also required to establish a secure connection.

    ### Develop and test your software
    
    Now that you have a MESH Mailbox for a 'Path to Live integration' environment and a TLS certificate, start developing your software using the MESH API.
    
    When you're ready to go live, you'll need to:
    - request a TLS certificate for the production environment
    - request a MESH mailbox for the production environment
    - get a conformance certificate
    - sign a connection agreement

    ### Submit non-functional requirements

    Once you've developed your software, you'll need to answer some questions in digital onboarding about the processes you use for:
    - handling data securely
    - managing clinical risk
    - using our production environment
    
    This shows that your software meets our non-functional requirements.
    
    [Sign in to the digital onboarding to answer questions on 'non-functional' requirements](https://identity.prod.api.platform.nhs.uk/auth/realms/developer-identity/login-actions/authenticate?client_id=digital-onboarding-service&tab_id=YTe9EqJeUCc) 

    ### Demonstrate technical conformance

    Before you can go live, in digital onboarding, you'll need to:
    - answer some questions to show you conform to the technical requirements of our APIs
    - upload a conformance certificate

    To get a technical conformance certificate, you'll need to complete the testing requirements in the supplier pack we sent to you.

    Some of these tests have to be witnessed by us. To arrange a witness test, reply to the email that contains the supplier pack. The witness testing takes 2 to 3 hours.

    In some cases, we may ask you to prepare test data a few days before the day of the witness testing.

    When you've completed a witness test, we'll email a technical conformance certificate to you within 5 working days. You can then upload it to digital onboarding.
    
    [Sign in to the digital onboarding to upload a technical conformance certificate](https://identity.prod.api.platform.nhs.uk/auth/realms/developer-identity/login-actions/authenticate?client_id=digital-onboarding-service&tab_id=vYrgcflr9fs)

    ### Get a MESH Mailbox for your live software

    When you're ready to send or receive real data, you'll need a MESH Mailbox in the production environment. We'll ask to see the conformance certificate for your software before we issue this.

    MESH Mailboxes are specific to environments, this means you'll need a different MESH Mailbox ID for each environment you use.

    To request a MESH Mailbox, you'll need to fill in an online form. It takes 5 to 10 minutes to complete.

    You'll need to know:
    - your [ODS code](https://odsportal.digital.nhs.uk/)
    - the [workflow groups or IDs](https://digital.nhs.uk/services/message-exchange-for-social-care-and-health-mesh/workflow-groups-and-workflow-ids) for the files you plan to send or receive
    - the contact details of the person who will be managing the mailbox in your organisation

    [Request a 'Live' MESH Mailbox](https://digital.nhs.uk/services/message-exchange-for-social-care-and-health-mesh/messaging-exchange-for-social-care-and-health-apply-for-a-mailbox)
    
    ### Get a TLS certificate for the production environment

    Once you have a Mailbox ID, you'll need to get a TLS certificate. This allows you to establish a secure connection to MESH in the production environment.

    How to get a TLS certificate
    1. Generate a private key using your preferred method, with the naming convention cn=mailboxid.odscode.api.mesh-client.nhs.uk
    2. Generate a CSR based on the private key and your Mailbox ID
    3. Email the CSR and technical conformance certificate to [ssd.nationalservicedesk@nhs.uk](mailto:ssd.nationalservicedesk@nhs.uk) - this needs to contain the common name from your CSR 'Subject' using the format local_id.ods_code.api.mesh-client.nhs.uk

    The local_id is a local identifier such as a server name and ods_code is your ODS code, for example, SERVER001.X26.api.mesh-client.nhs.uk.

    Once we receive your CSR and technical conformance certificate, we'll send you a TLS certificate for the production environment within 5 working days.

    Depending on how you implement MESH API, you may also need to [download a RootCA and SubCA certificate](https://digital.nhs.uk/services/path-to-live-environments/integration-environment#rootca-and-subca-certificates). These are also required to establish a secure connection.


    ### Sign connection agreement

    You'll need to sign a connection agreement before your software can go live. Once you've signed it, you need to upload it to the 'Legal agreement' section in digital onboarding. We'll email your connection agreement to you within 5 working days of completing your witness test.

    [Sign in to the digital onboarding to upload your connection agreement](https://identity.prod.api.platform.nhs.uk/auth/realms/developer-identity/login-actions/authenticate?client_id=digital-onboarding-service&tab_id=p19cQckpJso)

    ### Go live with your software

    You have now completed all integration and onboarding steps. This means you can use the MESH API with your live software.

    ## Related APIs
    A number of our APIs are messaging APIs that use MESH as the transport layer. For a full list, see [our API catalogue, filtered on MESH APIs](https://digital.nhs.uk/developer/api-catalogue?filter=mesh).
    
    In particular, this includes [National Event Management Service - FHIR API](https://digital.nhs.uk/developer/api-catalogue/national-events-management-service-fhir) -
    our API for publishing and subscribing to healthcare events such as updates to patient demographic details.

    ## API status and roadmap
    This API is [in production](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#api-status).

    To see our roadmap, or to suggest, comment or vote on features for this API, see our [interactive product backlog](https://nhs-digital-api-management.featureupvote.com/?tag=mesh-api).
    
    ## Service level
    This API is a platinum service, meaning it is operational and supported 24 x 7 x 365.

    For more details, see [service levels](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#service-levels).

    ## Technology
    This API is [RESTful](https://digital.nhs.uk/developer/guides-and-documentation/api-technologies-at-nhs-digital#basic-rest).

    ## Network access
    This API is available on the internet and on the [Health and Social Care Network (HSCN)](https://digital.nhs.uk/services/health-and-social-care-network).

    For more details see [Network access for APIs](https://digital.nhs.uk/developer/guides-and-documentation/network-access-for-apis).

    ## Environments and testing
    There are several independent, externally accessible instances of MESH for use by parties external to NHS Digital for testing, each with a different root URL.

    Some environments require a connection to the [HSCN network](https://digital.nhs.uk/services/health-and-social-care-network).

    | Purpose       | Network availability | URL                                       |
    |---------------|----------------------|-------------------------------------------|
    | Development   | HSCN                 | `https://msg.dev.spine2.ncrs.nhs.uk/`     |
    | Integration   | HSCN                 | `https://msg.int.spine2.ncrs.nhs.uk/`     |
    | Integration   | Internet             | `https://msg.intspineservices.nhs.uk/`    |
    | Deployment    | HSCN                 | `https://msg.dep.spine2.ncrs.nhs.uk/`     |
    | Production    | HSCN                 | `https://mesh-sync.national.ncrs.nhs.uk/` |
    | Production    | Internet             | `https://mesh-sync.spineservices.nhs.uk/` |

    **Note** - each environment has the same shared secret but requires different client TLS certificates.

    For any questions about our testing environments, contact our support mailbox [itoc.supportdesk@nhs.net](mailto:itoc.supportdesk@nhs.net).

    ### Develop against a local MESH sandbox server 
    There is a basic sandbox implementation of the MESH API available [mesh-sandbox](https://github.com/NHSDigital/mesh-sandbox).

    This sandbox can be used for local development and currently does not require a client certificate
    
    
    ## API Versioning
      
    MESH uses the `Accept` header to support different versions in the same API, sending a different `Accept` header will vary the response, refer to individual API endpoints for more detail.
    
    If not specified `Accept: application/json` will be assumed and the lowest supported response version for that particular endpoint will be returned.
      
    **Note:** please refer to the table below for more detail on the status of a given API version.
  
    | Version | Accept                                               | Status    |
    |---------|------------------------------------------------------|-----------|
    | 1       | `application/json` or `application/vnd.mesh.v1+json` | live      |
    | 2       | `application/vnd.mesh.v2+json`                       | live-beta |

    ## MESH Authorization header
    Requests to the MESH API require an authorisation token in the HTTP `Authorization` header.
    To be valid, the authorisation token must match the schema described below. The token includes cryptographic hashes of your organisation's MESH mailbox password and the environment-wide shared secret.
    As an additional security measure each token which matches the schema is valid for one request only, so you must generate a new token for every request. Any repeated use of a token results in a `403: Not Authorized` response from the MESH API.

    The authorisation token is made up of six elements. Except for the first and second elements, each element is separated from the next by a colon (:).

    | Name          | Description                                                                                    |
    |---------------|------------------------------------------------------------------------------------------------|
    | `NHSMESH`     | The name of the Custom Authentication Schema. The space at the end of the schema is important. |
    | `mailbox_id`  | The mailbox identifier sending the HTTP Request. Must be uppercase.                            |
    | `nonce`       | A GUID used as an encryption nonce.                                                            |
    | `nonce_count` | The number of times that the same nonce has been used.                                         |
    | `timestamp`   | The current date and time in `yyyyMMddHHmm` format.                                            |
    | `hash`        | HMAC-SHA256 hash - see the list below.                                                         |

    The `hash` is compiled of the following items:

    * The `shared_key` is the MESH environment shared secret, provided by [itoc.supportdesk@nhs.net](mailto:itoc.supportdesk@nhs.net) as part of onboarding to the PTL environment.
    * The `message` is the concatenation of the 5 following elements, joined by a colon (:):
      - `mailbox_id`
      - `nonce`
      - `nonce_count`
      - `mailbox_password`
      - `timestamp`

    Changing the `nonce` and/or `nonce_count` elements between requests ensures the Authorization header is unique and valid.

    **Notes**
    - the API rejects the request if the `timestamp` supplied is not within 2 hours of the server time
    - in the example below `SHARED_KEY` has been `[REDACTED]`, this is the 'environment shared secret' which you received as part of creating your mailbox

    ### Example implementation
    Here is an implementation of the above in `python3`.
    ```python
    """ Python code to generate a valid authorization header. """
    import hmac
    import uuid
    import datetime from hashlib
    import sha256
    
    AUTHSCHEMANAME = "NHSMESH " # Note: Space at the end of the schema.
    SHARED_KEY = "[REDACTED]" # Note: Don't hard code your passwords in a real implementation.
    
    def build_auth_header(mailbox_id: str, password: str = "password", nonce: str = None, noncecount: int = 0):
      """ Generate MESH Authorization header for mailboxid. """
      #Generate a GUID if required.
      if not nonce:
        nonce = str(uuid.uuid4())
      #Current time formatted as yyyyMMddHHmm
      #for example, 4th May 2020 13:05 would be 202005041305
      timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M")
      
      #for example, NHSMESH AMP01HC001:bd0e2bd5-218e-41d0-83a9-73fdec414803:0:202005041305
      hmac_msg = mailbox_id + ":" + nonce + ":" + str(nonce_count) + ":" + password + ":" + timestamp
      
      #HMAC is a standard crypto hash method built in the python standard library.
      hash_code = hmac.HMAC(SHARED_KEY.encode(), hmac_msg.encode(), sha256).hexdigest()
      return (
        AUTH_SCHEMA_NAME # Note: No colon between 1st and 2nd elements.
        + mailbox_id + ":"
        + nonce + ":"
        + str(nonce_count) + ":"
        + timestamp+ ":"
        + hash_code
      )
    ```

    ## MESH API pseudocode
    To use MESH effectively, use the following flow of API calls:

    - inbox poll cycle
    - outbox workflow

    Validate your mailbox once every 24 hours using the 'Validate a mailbox' endpoint.

    ### Inbox poll cycle
    Spine gives each message a unique message identifier after you post it to your outbox. It is the primary identifier for the message during MESH transit.

    It is suggested to poll your mailbox every 5 minutes, but at least every 24 hours. The pseudocode for a mailbox poll is:

    1. Poll to get the messageIds of messages ready to download from the 'Check an inbox' endpoint.
    2. For each message identifier returned in step 1:
        * download the message with the 'Download message' endpoint
        * if it's identified as a chunked message, download all remaining chunks with the 'Download message chunk' endpoint
        * acknowledge receipt of the message via the 'Acknowledge message' endpoint
    3. Repeat step 2 until you have processed the number of messages returned in step 1.
    4. If you received exactly 500 messages in step 1 then repeat from step 1, immediately polling again and downloading, until you receive 0 messages in step 1.

    ### Asynchronous error reporting
    Most problems with message transfer are indicated synchronously (immediately) when you call the 'Send Message' endpoint. However, some errors might occur after a successful request (asynchronously). You get any error reports as messages in your inbox, which you need to receive as part of your inbox poll cycle.
    Error reports differ from regular messages in these ways:
    - the 'Download message endpoint' has a different value for the `Mex-MessageType` header:
      * DATA for a normal organisation-to-organisation message
      * REPORT for an error report
    - the Download message response body of an error report message is empty

    We strongly recommend you check the value of `Mex-MessageType` after downloading each message, so that you can take appropriate action if needed.

    | Error Report Header     | Description                                                              |
    |-------------------------|--------------------------------------------------------------------------|
    | `Mex-StatusEvent`       | Step in the MESH server side process when the error occurred             |
    | `Mex-LinkedMsgID`       | The message identifier of the undelivered message                        |
    | `Mex-WorkflowID`        | The workflow identifier of the undelivered message                       |
    | `Mex-StatusTimestamp`   | Time the error occurred                                                  |
    | `Mex-LocalID`           | Sender assigned local identifier of the unacknowledged message           |
    | `Mex-StatusCode`        | Indicate the status of the message, non-00 indicates error               |
    | `Mex-MessageID`         | The message identifier of the error report (not the undelivered message) |
    | `Mex-StatusSuccess`     | SUCCESS or ERROR (is always ERROR in an error report)                    |
    | `Mex-StatusDescription` | Indicate the status the message, non-00 indicates error                  |
    | `Mex-To`                | Intended receiver of the undelivered message                             |
    | `Mex-MessageType`       | REPORT                                                                   |
    | `Mex-Subject`           | The subject of the undelivered message                                   |
    
    **Note:** Headers should be treated case insensitively, most http clients will do this for you automatically, but please do not rely on explicit case.

    ### Error codes
    Some of the below errors are only applicable for some API calls. For example, error code 15 would only be found when calling 'Child Protection Information Services' (CP-IS).

    | Error code | Typical description                                                       |
    |------------|---------------------------------------------------------------------------|
    | 02         | Data file is missing or inaccessible                                      |
    | 06         | Malformed headers                                                         |
    | 07         | Invalid From Address, the mailbox does not match the authorization header |
    | 08         | Missing Mex-To header                                                     |
    | 11         | Invalid Message Type for the transfer, should be DATA                     |
    | 12         | Unregistered to address                                                   |
    | 14         | Undelivered message                                                       |
    | 15         | Bad 'Child Protection - Information Sharing' (CP-IS) File                 |
    | 16         | Sender is not allowed to send messages of this type                       |
    | 17         | Workflow ID not registered for mailbox                                    |


    ### Outbox workflow
    The maximum amount of data allowed by MESH in a single request message is 100MB over HSCN connections or 20MB over the internet. You can send larger messages by breaking them into \"chunks\" that are transmitted as a single message over multiple requests. The upper limit of a single chunked message is 20GB.

    The [MESH UI](https://digital.nhs.uk/services/message-exchange-for-social-care-and-health-mesh/compare-mesh-services#mesh-user-interface) and older versions of the MESH client do not support chunking. Check that the receiver's interface to MESH for your workflow identifier handles chunked messages prior to sending. To do this:

    1. Determine the size of your message data (after compression) with a standard algorithm (such as `gzip`). If the compressed message is larger than 100MB or 20MB if sending over the internet, is smaller than 20GB, and the receiving mailbox / workflow identifier supports chunking, then you can send a chunked message. To prepare for this:
        *  split the **uncompressed** data into ordered chunks
        * **independently** compress each chunk with the **same** compression algorithm (such as `gzip`) such that each chunk is smaller than 100MB
        * use the first chunk (after compression) as the initial message data
    2. Send a message with appropriate workflow identifier and `Mex-To` (recipient mailbox) header. To do this:
        * optionally include a local identifier from step 2 for tracking.  This field must not contain PID.
        * if sending a chunked message, include an extra header to indicate that this is the first in a series of chunks, then submit the subsequent chunks via the 'Send Chunked Message' endpoint
    3. A message identifier will be returned which is the unique identifier and can be used for tracking and helping with incident resolution. It would be good practice to log this identifier.

    ### Message expiration
    Messages that are not downloaded and acknowledged within five days of delivery are removed from your inbox. The sending organisation receives an error report explaining that the receiver did not collect the message. Uncollected messages are completely deleted from the MESH server 30 days after the initial delivery. If the sending organisation cannot re-send the message within the intervening time, it may contact the [NHS Digital national service desk](https://digital.nhs.uk/developer/help-and-support) with the error report details and ask for the message to be placed in your inbox again.

    ## Onboarding
    
    You need to get your software approved by us before it can go live with this API. We call this onboarding. The onboarding process can sometimes be quite long, so it's worth planning well ahead.
    
    To get started with the MESH API you will need to create a developer account. This is where you can demonstrate that you can manage risks and that your software conforms technically with the requirements for this API. You can also manage onboarding for other APIs in your account.

    ## Errors
    We use standard HTTP status codes to show whether an API request succeeded or not. They are usually in the range:

    * 200 to 299 if it succeeded, including code 202 if it was accepted by an API that needs to wait for further action
    * 400 to 499 if it failed because of a client error by your application
    * 500 to 599 if it failed because of an error on our server

    Errors specific to each API are shown in the Endpoints section, under Response. See our [reference guide](https://digital.nhs.uk/developer/guides-and-documentation/reference-guide#http-status-codes) for more on errors.

  title: Message Exchange for Social Care and Health - REST API
  version: v1.0.168-alpha
openapi: 3.0.2
paths:
  /messageexchange/endpointlookup/{ods_code}/{workflow_id}:
    get:
      description: |
        ## Overview
        Use this endpoint to search for the mailbox of the organisation you want to send data to, using their unique [Organisation Data Service (ODS) code](https://odsportal.hscic.gov.uk/Organisation/Search), their MESH mailbox and the agreed workflow identifier for the data. 

        An example call:

        ### Request

        ```shell
        curl -k \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/endpointlookup/SCREEN2/SPINE_GPCAPITATION_EXTRACT
        ```

        ### Response

        ```json
        {
          "query_id": "20200601131040203367_A441C2_1573484974",
          "results": [
            {
              "endpoint_type": "MESH",
              "description": "Breast Cancer Screening Services",
              "address": "X26HC022"
            },
            {
              "endpoint_type": "MESH",
              "description": "AAA Screening Services",
              "address": "X26HC021"
            },
            { 
            "endpoint_type": "MESH",
              "description": "Bowel Cancer Screening Services (England, DMS)",
              "address": "X26HC020"
            }
          ]
        }
        ```

        **Note:** neither the ODS code or workflow identifier in this example are real.

      operationId: mesh-address-lookup
      parameters:
        - in: path
          name: ods_code
          required: true
          description: All health and social care organisations have a unique ODS code
          example: SCREEN2
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - in: path
          name: workflow_id
          required: true
          description: Workflow ID
          example: '{Workflow ID}'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  query_id:
                    type: string
                    example: 20200601131040203367_A441C2_1573484974
                  results:
                    type: array
                    items:
                      type: string
      summary: Look up MESH address
      tags:
      - Lookup
  /messageexchange/{mailbox_id}:
    get:
      description: |
        ## Overview
        Use this endpoint to check that MESH can be reached and that the authentication you are using is correct.  This endpoint only needs to be called once every 24 hours.
        This endpoint updates the details of the connection history held for your mailbox and is similar to a keep-alive or ping message, in that it allows monitoring on the Spine to be aware of the active use of a mailbox despite a lack of traffic.

        ### Request

        ```shell
        curl -k \
          --request 'GET' \
          --cacert 'mesh-ca.pem' \
          --key 'mesh-client-key.pem' \
          --cert 'mesh-client-cert.pem' \
          --header 'Authorization: NHSMESH X26HC005:1c820cd4-be3e-43ff-807f-e65362892722:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
          --header 'Mex-ClientVersion: ApiDocs==0.0.1' \
          --header 'Mex-OSArchitecture: x86_64' \
          --header 'Mex-OSName: Linux' \
          --header 'Mex-OSVersion: #44~18.04.2-Ubuntu' \
          https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC005
        ```

      parameters:
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - in: header
          name: Mex-ClientVersion
          required: true
          description: Client version number
          example: ApiDocs==0.0.1
          schema:
            type: string
        - in: header
          name: Mex-OSName
          required: true
          description: Operating system name
          example: Linux
          schema:
            type: string
        - in: header
          name: Mex-OSVersion
          required: true
          description: Operating system version
          example: '#44~18.04.2-Ubuntu'
          schema:
            type: string
        - schema:
            type: string
          in: header
          description: '{Operating System Architecture}'
          name: Mex-OSArchitecture
        - schema:
            type: string
          in: header
          name: Mex-JavaVersion
          description: '{JVM Version Number}'
      operationId: validate-mailbox
      responses:
        '200':
          description: OK

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
      summary: Validate a mailbox (Handshake)
      tags:
      - Handshake
  /messageexchange/{mailbox_id}/count:
    get:
      description: |
        ## Overview
        Use this endpoint to check the number of messages currently held in the MESH mailbox that are ready to download.

        This endpoint is now deprecated as it is not needed as part of the polling cycle.
      deprecated: true
      operationId: check-inbox-count
      parameters:
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: number of messages in mailbox
                  internalID:
                    type: string
                    description: internal identifier to help error diagnosis, be aware the format of this may change in line with internal system changes and the format should not be parsed or validated or otherwise depended on
                    example: 20200601122152994285_af20cED
                  allResultsIncluded:
                    type: boolean
                    description: 'In rare cases not all results can be included, if false the mailbox needs to download.'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Authentication failed
      summary: Check an inbox count (deprecated)
      tags:
      - Inbox
  /messageexchange/{mailbox_id}/inbox:
    get:
      description: |-
        ## Overview
        Use this endpoint to return the message identifier of messages in the mailbox inbox ready for download. 
        Client systems MUST poll their assigned inbox a minimum of once a day and a maximum of once every five minutes for messages (unless there are more messages waiting to download).
        
        A maximum of 500 message identifier are returned in every request.  Continue the polling and download cycle until you empty the mailbox and you receive less than 500 messages in the response.

        ### Request

        ```shell
        curl -k \
        --request 'GET' \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC005:66eef28b-e097-421d-998d-ea0c92c2c2fb:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC005/inbox
        ```

        ### Response

        ```json
        {"messages": []}
        ```
      operationId: check-inbox
      parameters:
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      type: string
                    description: Array of strings of messageId in inbox
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorEvent:
                    type: string
                    example: status event
                    description: Status event
                  errorCode:
                    type: integer
                    description: Status code
                    example: 403
                  errorDescription:
                    type: string
                    example: Description of the status
                    description: Description of the status
      summary: Check an inbox
      tags:
      - Inbox
  /messageexchange/{mailbox_id}/inbox/{message_id}:
    get:
      description: |-
        ## Overview
        Use this endpoint to retrieve a message based on the message identifier obtained from the 'Check Inbox' endpoint.
        
        **Note:** Headers should be treated case insensitively, most http clients will do this for you automatically, but please do not rely on explicit case.

        ### Message expiration
        Messages you do not download and acknowledge within five days of delivery are removed from your inbox. The sending organisation receives an error report explaining that the receiver did not collect the message. Uncollected messages are completely deleted from the MESH server 30 days after initial delivery. If the sending organisation cannot re-send the message within the intervening time, they can contact the [NHS Digital national service desk](https://digital.nhs.uk/developer/help-and-support) with the error report details and ask for the message to be re-sent.

        ### Report Messages
        The `Mex-MessageType` header indicates if the payload is a `DATA` message or a `REPORT`.  
        Error reports differ from regular messages in these ways:
        - the Download message endpoint has a different value for the Mex-MessageType header
          * DATA for a normal organisation-to-organisation message
          * REPORT for an error report
        - the Download message response body of an error report message is empty

        ### Request

        ```shell
        curl -k \
        --request 'GET' \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC005:2942264f-46e5-450f-90fc-22a0c09efa37:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://msg.int.spine2.ncrs.nhs.uk/messageexchange/X26HC005/inbox/20200529155357895317_3573F8
        ```

        ### Response

        ```json
        {"messages": ["20200529155357895317_3573F8"]}
        ```
      operationId: download-message
      parameters:
        - in: path
          name: message_id
          required: true
          description: The ID of the message
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - in: path
          name: mailbox_id
          required: true
          description: Mailbox ID
          example: '{Mailbox ID}'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '206':
          description: Partial download – Indicates that chunk has been downloaded successfully and that there are further chunks.
          content:
            binary:
              schema:
                type: object
        '403':
          description: Authentication failed

        '410':
          description: 'Gone, message has already been downloaded and acknowledged'
          content:
            application/json:
              schema:
                type: object
      summary: Download message
      tags:
      - Inbox
  /messageexchange/{mailbox_id}/inbox/{message_id}/status/acknowledged:
    put:
      description: |-
        ## Overview
        Use this endpoint to acknowledge the successful download of a message. 
        
        This operation:

        * closes the message transaction on Spine
        * removes the message from your mailbox inbox, which means that the message identifier does not appear in subsequent calls to the 'Check inbox' endpoint and cannot be downloaded again
        
        **Note:** If you fail to acknowledge a message after five days in the inbox this sends a non-delivery report to the sender's inbox.
        
        ### Request

        ```shell
        curl -k \
        --request 'PUT' \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC005:bb59be38-e50b-4e5a-9f11-e566e7509552:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC005/inbox/20200529155357895317_3573F8/status/acknowledged
        ```

        ### Response

        ```json
        { "messageId" : "20200529155357895317_3573F8" }
        ```

      operationId: acknowledge-message
      parameters:
        - in: path
          name: message_id
          required: true
          description: The ID of the message
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageID:
                    type: string
                    example: 20200529155357895317_3573F8
        '403':
          description: Authentication failed
      summary: Acknowledge message
      tags:
      - Inbox
  /messageexchange/{mailbox_id}/inbox/{message_id}/{chunkNo}:
    get:
      description: |
        ## Overview
        Use this endpoint to download a chunked message. Initially, call the 'Download Message' endpoint with the message identifier given by the 'Check Inbox' endpoint as usual. When the message is chunked, the 'Download message' endpoint response differs in two ways:
        * the response code is '206: Partial Content' (instead of '200: OK')
        * the response headers contain Mex-Chunk-Range: 1:n


        This endpoint is used to download the remaining n-1 chunks. 
        
        **Note:** Headers should be treated case insensitively, most http clients will do this for you automatically, but please do not rely on explicit case.

        ### Request

        Following on from the example in the 'Send chunked message' endpoint, Alice checks her inbox and sees a new message.


        ```shell
        curl -k \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --request 'GET' \
        --header 'Authorization: NHSMESH X26HC005:142b8a1e-e953-4e5e-98a8-b27741e15747:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC005/inbox
        ```

        She downloads the first part of the message. **Note** this use of `curl` uses the `--include` argument, to show the value of the HTTP headers in the MESH response.

        ```shell
        curl -k \
        --include \
        --request 'GET' \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC005:777670ce-02f7-44fe-a53b-eb33eb1cb564:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC005/inbox/20200601122152994285_D59900
        ```

        ```shell
        HTTP/1.1 206 Partial Content
        Server: nginx
        Date: Mon, 01 Jun 2020 12:24:09 GMT
        Content-Type: application/octet-stream
        Content-Length: 100
        Connection: keep-alive
        Mex-Chunk-Range: 1:2
        Mex-WorkflowID: API-DOCS-TEST
        Mex-Content-Compressed: N
        Mex-AddressType: ALL
        Mex-StatusSuccess: SUCCESS
        Mex-StatusDescription: Transferred to recipient mailbox
        Mex-MessageType: DATA
        Mex-StatusEvent: TRANSFER
        Mex-ToSMTP: x26hc005@dts.nhs.uk
        Mex-Version: 1.0
        Mex-FromSMTP: x26hc006@dts.nhs.uk
        Mex-To: X26HC005
        Mex-StatusTimestamp: 20200601122152
        Mex-LocalID: api-docs-bob-sends-alice-a-chunked-file
        Mex-StatusCode: 00
        Mex-FileName: message.txt.gz
        Mex-MessageID: 20200601122152994285_D59900
        Mex-From: X26HC006

        Hi Alice,

        This is Bob. It's really nice that we can communicate via SPINE!

        I hope to hear more fro
        ```

        Here we have added the `--include` argument to `curl` which prints more response information, including the HTTP response code and response headers. (`tr -d '\r'` invokes a linux utility to strip carriage returns from the end of each of the lines added to the `curl` `--include` argument).

        Alice notes that the response code is `206 Partial Content` - meaning it is the first part of a chunked message. How much of the message remains is given by the `Mex-Chunk-Range` header, `1:2` indicating the response body is the first of two parts.

        Alice makes another call to retrieve the second part of the message.

        ```shell
        curl -k \
        --include \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC005:71139532-9215-4ff8-8a74-d602386bac30:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC005/inbox/20200601122152994285_D59900/2
        ```

        ```shell
        HTTP/1.1 200 OK
        Server: nginx
        Date: Mon, 01 Jun 2020 12:24:17 GMT
        Content-Type: application/octet-stream
        Content-Length: 27
        Connection: keep-alive
        Mex-Content-Compressed: N
        Mex-AddressType: ALL
        Mex-LocalID: api-docs-bob-sends-alice-a-chunked-file
        Mex-ToSMTP: x26hc005@dts.nhs.uk
        Mex-Chunk-Range: 2:2
        Etag: "866243ab74e0107a4d5835f8d6552e7f20c39ee1"
        Mex-FileName: message.txt.gz
        Mex-Version: 1.0
        Mex-FromSMTP: x26hc006@dts.nhs.uk
        Mex-WorkflowID: API-DOCS-TEST
        Mex-To: X26HC005
        Mex-MessageType: DATA
        Mex-MessageID: 20200601122152994285_D59900
        Mex-From: X26HC006

        m you in the future,

        Bob.
        ```

        That this is the final part of the message is indicated in two ways:

        -   the response code is `200 OK` rather than `206 Partial Content`
        -   the `Mex-Chunk-Range` response header is `2:2`

      operationId: download-message-chunk
      parameters:
        - in: path
          name: mailbox_id
          required: true
          description: Recipient mailbox ID
          example: '{Recipient Mailbox ID}'
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - in: path
          name: message_id
          required: true
          description: The ID of the message
          schema:
            type: string
        - in: path
          name: chunkNo
          required: true
          description: The index number of the chunk
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '206':
          description: Partial download – Indicates that chunk has been downloaded successfully and that there are further chunks.
          content:
            binary:
              schema:
                type: object
        '403':
          description: Authentication failed

        '404':
          description: Message does not exist
          content:
            application/json:
              schema:
                type: object
      summary: Download message chunk
      tags:
      - Inbox
  /messageexchange/{mailbox_id}/outbox:
    post:
      description: |-
        ## Overview
        Use this endpoint to send a message via MESH. Use the POST command to your virtual outbox. Specify the message recipient in the request headers, with the message contained in the request body.

        ### Messages larger than 100MB
        100MB (20MB on internet) is the largest data payload the MESH API accepts in a single request. Compress larger messages to reduce bandwidth and data storage on Spine. If compression does not sufficiently reduce the message size enough for transmission in a single request then you can break it up into smaller chunks and transmit them separately provided: 
          1.  The total compressed size of the message is < 100MB - this is the Spine upper limit for a single message.
          2.  The receiver mailbox and workflow identifier support the downloading of chunked messages. MESH UI and older versions of the MESH client do not support this.

        To correctly break the outbound message into valid chunks: 
          1.  Split the **uncompressed** message into `n` ordered chunks such that each (compressed) chunk is smaller than 20MB.
          2.  **Independently** compress each chunk with the same compression algorithm (e.g. `gzip`).
          3.  The first (compressed) chunk of the message should be transmitted using this endpoint (the normal send message endpoint). Include the optional `Mex-Chunk-Range` header with a value `1:n` to tell Spine that this is a chunked message and to wait for `n-1` other requests before delivering the message. The message identifier of this initial server response **must** be captured as it is a required path element of the Send chunked message URL.

        Always set the workflow identifier as some workflows are restricted which means the mailbox sender and recipient must be configured for the workflow identifier you send.

        To discover the recipient mailbox either use the `endpointlookup` endpoint or for certain workflows you can include [demographic details](https://digital.nhs.uk/services/message-exchange-for-social-care-and-health-mesh/mesh-guidance-hub/endpoint-lookup-service-and-workflowids#using-the-to_dts-field-of-a-mesh-message-to-find-a-mailbox-) in the `Mex-To` field. 

        It is good practice to capture the returned message identifier as this provides a unique identifier which you can use for message tracking.
        
        ### Request

        ```shell
        curl -k \
        --request 'POST' \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC006:c1f2df9c-fe9e-4d11-ba78-49a8bc705eb4:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        --header 'Content-Type: application/octet-stream' \
        --header 'Mex-From: X26HC006' \
        --header 'Mex-To: X26HC005' \
        --header 'Mex-WorkflowID: API-DOCS-TEST' \
        --header 'Mex-FileName: None' \
        --header 'Mex-LocalID: api-docs-bob-greets-alice' \
        --data 'This is a message' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC006/outbox
        ```

        ### Response

        ```json
        {"messageID": "20200529155357895317_3573F8"}
        ```
      operationId: send-message
      parameters:
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - in: header
          name: Content-Type
          required: true
          description: Type of sent content
          example: application/octet-stream
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Content-Encoding
          description: Algorithm used to compress the file e.g. 'gzip'
        - in: header
          name: Mex-FileName
          required: true
          description: '{Original File Name}'
          example: '{Message content should have this file name after receipt}'
          schema:
            type: string
        - in: header
          name: Mex-From
          required: true
          description: Sending organisation's mailbox ID
          example: '{Sending organisation''s mailbox ID}'
          schema:
            type: string
        - in: header
          name: Mex-To
          required: true
          description: Recipient mailbox ID
          example: '{Recipient Mailbox ID}'
          schema:
            type: string
        - in: header
          name: Mex-WorkflowID
          required: true
          description: Identifies the Business Workflow associated with the message
          example: '{Workflow ID}'
          schema:
            type: string
        - schema:
            type: string
          in: header
          name: Mex-Chunk-Range
          description: '1:{n} {if first of n chunks, see Send chunked message}'
        - schema:
            type: string
          in: header
          name: Mex-LocalID
          description: 'A unique ID generated by you, must not contain Patient Identifiable Data PID'
        - schema:
            type: string
          in: header
          name: Mex-Subject
          description: 'Message subject information, avoid including PID'
        - schema:
            type: string
          in: header
          name: Mex-Content-Checksum
          description: Checksum of the original file contents
        - schema:
            type: string
          in: header
          name: Mex-Content-Encrypted
          description: 'Indicate to the receiver that contents are encrypted'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageID:
                    type: string
                    example: 20200529155357895317_3573F8
                    description: Unique Id assigned by the MESH server
        '403':
          description: Authentication failed

        '417':
          description: Invalid Recipient or the workflow is restricted
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageID:
                    type: string
                    description: ID of the allocated message
                  errorEvent:
                    type: string
                    description: Status event
                  errorCode:
                    type: integer
                    description: Status code
                    example: 417
                  errorDescription:
                    type: string
                    description: Description of the status
      summary: Send message
      tags:
      - Outbox
  /messageexchange/{mailbox_id}/outbox/tracking:
    get:
      description: |
        ## Overview
        Use this endpoint to enquire about the status of messages sent from your outbox. When determining the frequency of the calling of this endpoint consider that MESH is asynchronous, and it might be some hours until the recipient downloads your message. You must not poll this endpoint frequently.

        The message identifier is the value returned in the response to a message upload.

        Do not use this endpoint to replace a business ack message. If the business process requires confirmation that the recipient has processed the message then send a business ACK over MESH. The convention is to use the same workflow identifier appended with `_ACK`.

        ### Request
        It is possible for Bob to check the status of the chunked message he sent to Alice. (Note that in this example, Alice has not acknowledged the chunked message she received from Bob).


        ```shell
        curl -k \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC006:1f6c9442-eb9a-440c-b4ed-ee4fd525e176:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC006/outbox/tracking?messageID=20210311101813838554_1B8F53
        ```

        ### Response

        ```json
        {
          "processId": null,
          "addressType": "ALL",
          "localId": "api-docs-bob-sends-alice-a-chunked-file",
          "recipientBillingEntity": "England",
          "dtsId": "20210311101813838554_1B8F53",
          "statusSuccess": null,
          "messageType": "DATA",
          "statusTimestamp": null,
          "senderBillingEntity": "England",
          "senderOdsCode": "X26",
          "partnerId": null,
          "recipientName": "APIM bebop",
          "senderName": "APIM bebop",
          "subject": null,
          "statusEvent": null,
          "version": "1.0",
          "encryptedFlag": null,
          "statusDescription": null,
          "senderOrgName": "TEST Org Partnership Trust",
          "status": "Accepted",
          "workflowId": "API-DOCS-TEST",
          "senderOrgCode": "TestOrg",
          "recipientOrgName": "TEST Org Partnership Trust",
          "expiryTime": "20200606122153",
          "senderSmtp": "x26hc006@dts.nhs.uk",
          "fileName": "message.txt.gz",
          "recipientSmtp": "x26hc005@dts.nhs.uk",
          "meshRecipientOdsCode": "X26",
          "compressFlag": null,
          "uploadTimestamp": "20200601122152",
          "recipient": "X26HC005",
          "contentsBase64": true,
          "sender": "X26HC006",
          "checksum": null,
          "isCompressed": null,
          "contentEncoding": "gzip",
          "recipientOrgCode": "TestOrg",
          "messageId": "20210311101813838554_1B8F53",
          "statusCode": null,
          "fileSize": 187
        }
        ```

        Suppose Alice only now acknowledges the message Bob sent.

        ### Request

        ```shell
        curl -k \
        --request 'PUT' \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC005:57db9dd2-2156-4c02-90d4-66e7082179db:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC005/inbox/20210311101813838554_1B8F53/status/acknowledged
        ```

        ### Response

        ```json
        {"messageId" : "20210311101813838554_1B8F53" }
        ```

        The next call to Track outbox by Bob

        ### Request

        ```shell
        curl -k \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --header 'Authorization: NHSMESH X26HC006:dd3f8609-b2c3-4f5a-aa62-c456579b8f77:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC006/outbox/tracking?messageID=20210311101813838554_1B8F53
        ```

        ### Response

        ```json
        {
          "downloadTimestamp": "20200601122957",
          "status": "Acknowledged",
          "messageId": "20210311101813838554_1B8F53"
        }
        ```

        This shows the `status` field of the response has changed from `Accepted` to `Acknowledged`.  All the fields in the previous response are also included.

      operationId: outbox-tracking
      parameters:
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - in: query
          name: messageID
          required: true
          description: Value of messageID returned in the `send message` response
          example: 20210311101813838554_1B8F53
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  processId:
                    type: string
                    example: null
                  addressType:
                    type: string
                    example: ALL
                  localId:
                    type: string
                    example: api-docs-bob-sends-alice-a-chunked-file
                  recipientBillingEntity:
                    type: string
                    example: England
                  dtsId:
                    type: string
                    example: 20210311101813838554_1B8F53
                  statusSuccess:
                    type: string
                    example: null
                  messageType:
                    type: string
                    example: DATA
                  statusTimestamp:
                    type: string
                    example: null
                  senderBillingEntity:
                    type: string
                    example: England
                  senderOdsCode:
                    type: string
                    example: X26
                  partnerId:
                    type: string
                    example: null
                  recipientName:
                    type: string
                    example: APIM bebop
                  senderName:
                    type: string
                    example: APIM bebop
                  subject:
                    type: string
                    example: null
                  statusEvent:
                    type: string
                    example: null
                  version:
                    type: string
                    example: '1.0'
                  encryptedFlag:
                    type: string
                    example: null
                  statusDescription:
                    type: string
                    example: null
                  senderOrgName:
                    type: string
                    example: TEST Org Partnership Trust
                  status:
                    type: string
                    example: Accepted
                  workflowId:
                    type: string
                    example: API-DOCS-TEST
                  senderOrgCode:
                    type: string
                    example: TestOrg
                  recipientOrgName:
                    type: string
                    example: TEST Org Partnership Trust
                  expiryTime:
                    type: string
                    example: '20200606122153'
                  senderSmtp:
                    type: string
                    example: x26hc006@dts.nhs.uk
                  fileName:
                    type: string
                    example: message.txt.gz
                  recipientSmtp:
                    type: string
                    example: x26hc005@dts.nhs.uk
                  meshRecipientOdsCode:
                    type: string
                    example: X26
                  compressFlag:
                    type: string
                    example: null
                  uploadTimestamp:
                    type: string
                    example: '20200601122152'
                  recipient:
                    type: string
                    example: X26HC005
                  sender:
                    type: string
                    example: X26HC006
                  checksum:
                    type: string
                    example: null
                  isCompressed:
                    type: string
                    example: null
                  contentEncoding:
                    type: string
                    example: gzip
                  recipientOrgCode:
                    type: string
                    example: TestOrg
                  messageId:
                    type: string
                    example: 20210311101813838554_1B8F53
                  statusCode:
                    type: string
                    example: null
                  fileSize:
                    type: integer
                    example: 187
        '403':
          description: Message does not exist
          content:
            application/json:
              schema:
                type: object
      summary: Track outbox
      tags:
      - Tracking
  /messageexchange/{mailbox_id}/outbox/tracking/{local_id}:
    get:
      description: |
        ## Overview
        This endpoint is now `deprecated` `tracking?messageID` should be used instead.
      deprecated: true
      operationId: outbox-tracking-localID
      parameters:
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
        - in: path
          name: local_id
          required: true
          description: Value of Mex-LocalID provided by sender
          example: api-docs-bob-sends-alice-a-chunked-file
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  processId:
                    type: string
                    example: null
                  addressType:
                    type: string
                    example: ALL
                  localId:
                    type: string
                    example: api-docs-bob-sends-alice-a-chunked-file
                  recipientBillingEntity:
                    type: string
                    example: England
                  dtsId:
                    type: string
                    example: 20200601122152994285_D59900
                  statusSuccess:
                    type: string
                    example: null
                  messageType:
                    type: string
                    example: DATA
                  statusTimestamp:
                    type: string
                    example: null
                  senderBillingEntity:
                    type: string
                    example: England
                  senderOdsCode:
                    type: string
                    example: X26
                  partnerId:
                    type: string
                    example: null
                  recipientName:
                    type: string
                    example: APIM bebop
                  senderName:
                    type: string
                    example: APIM bebop
                  subject:
                    type: string
                    example: null
                  statusEvent:
                    type: string
                    example: null
                  version:
                    type: string
                    example: '1.0'
                  encryptedFlag:
                    type: string
                    example: null
                  statusDescription:
                    type: string
                    example: null
                  senderOrgName:
                    type: string
                    example: TEST Org Partnership Trust
                  status:
                    type: string
                    example: Accepted
                  workflowId:
                    type: string
                    example: API-DOCS-TEST
                  senderOrgCode:
                    type: string
                    example: TestOrg
                  recipientOrgName:
                    type: string
                    example: TEST Org Partnership Trust
                  expiryTime:
                    type: string
                    example: '20200606122153'
                  senderSmtp:
                    type: string
                    example: x26hc006@dts.nhs.uk
                  fileName:
                    type: string
                    example: message.txt.gz
                  recipientSmtp:
                    type: string
                    example: x26hc005@dts.nhs.uk
                  meshRecipientOdsCode:
                    type: string
                    example: X26
                  compressFlag:
                    type: string
                    example: null
                  uploadTimestamp:
                    type: string
                    example: '20200601122152'
                  recipient:
                    type: string
                    example: X26HC005
                  sender:
                    type: string
                    example: X26HC006
                  checksum:
                    type: string
                    example: null
                  isCompressed:
                    type: string
                    example: null
                  contentEncoding:
                    type: string
                    example: gzip
                  recipientOrgCode:
                    type: string
                    example: TestOrg
                  messageId:
                    type: string
                    example: 20200601122152994285_D59900
                  statusCode:
                    type: string
                    example: null
                  fileSize:
                    type: integer
                    example: 187
        '300':
          description: Multiple options (The localId provided with the message was not unique)
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Message does not exist
          content:
            application/json:
              schema:
                type: object
      summary: Track outbox (deprecated)
      tags:
      - Tracking
  /messageexchange/{mailbox_id}/outbox/{message_id}/{chunkNo}:
    post:
      description: |-
        ## Overview
        Use this endpoint to send a chunked message. The 'Send Message' endpoint has a maximum single request message payload size of 100MB over HSCN or 20MB over the internet. However, you can send much larger messages (up to 20GB) by breaking up the message into chunks and transmitting it over multiple requests. 

        **Note**: Some workflow ids do not support chunking because it is not currently supported in the MESH UI and older versions of the MESH client. Check with your receiving organisation before sending messages with this endpoint.
        
        To send a chunked message:

        1. Split it into separate files
        2. Compress the individual chunks **separately** with the **same** compression program (e.g. `gzip`).
            - **DO NOT** compress a large file and then split the compressed version
        3. Upload the first file using the normal 'Send message' endpoint.
            - include the `Mex-Chunk-Range` header with a value of `1:n` where `n` is the number of separate files your big data is split into
            - capture the message identifier field in the returned JSON
        4. Upload subsequent files in the correct order using the chunked message endpoint

        **Note:** fewer headers are required for the chunked message endpoint because Spine uses the relevant metadata from the initial (`Mex-Chunk-Header=1:n`) call to the 'Send message' endpoint.

        ### Request

        Suppose Bob has a large file to send to Alice. In this example we will use **message.txt**. It is easily small enough to send in a single request, but we will chunk it anyway to illustrate the API calls.
        ```shell
        ls -sh message.txt
        4.0kb message.txt
        ```
        ```shell
        cat message.txt

        Hi Alice,

        This is Bob. It's really nice that we can communicate via SPINE!

        I hope to hear more from you in the future,

        Bob.
        ```

        First we break up our one "large" file into two smaller files. We will transmit one per request.

        ```shell
        split -b 100 message.txt message.txt_
        ls -sh message.txt_*
        ```
        Large messages should be compressed to reduce the bandwidth and storage requirements for Spine.

        ```shell
        for chunk_file in message.txt_*; do
            gzip -k -f $chunk_file;
        done
        ls -sh message.txt_*.gz

        4.0kb message.txt_aa.gz
        4.0kb message.txt_ab.gz
        ```
        ```shell
        curl -k \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --request 'POST' \
        --header 'Authorization: NHSMESH X26HC006:2c6e938e-9a72-4a7a-9664-96ac1f341331:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        --header 'Content-Type: application/octet-stream' \
        --header 'Mex-From: X26HC006' \
        --header 'Mex-To: X26HC005' \
        --header 'Mex-WorkflowID: API-DOCS-TEST' \
        --header 'Mex-FileName: message.txt.gz' \
        --header 'Mex-LocalID: api-docs-bob-sends-alice-a-chunked-file' \
        --header 'Mex-Chunk-Range: 1:2' \
        --header 'Content-Encoding: gzip' \
        --data-binary '@message.txt_aa.gz' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC006/outbox
        ```
        ```shell
        curl -k \
        --cacert 'mesh-ca.pem' \
        --key 'mesh-client-key.pem' \
        --cert 'mesh-client-cert.pem' \
        --request 'POST' \
        --header 'Authorization: NHSMESH X26HC006:06bf0527-ba77-47f0-b22f-d7d08a88ad26:0:202006041718:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced' \
        --header 'Mex-Chunk-Range: 2:2' \
        --data-binary '@./message.txt_ab.gz' \
        https://mesh-sync.spineservices.nhs.uk/messageexchange/X26HC006/outbox/20200601122152994285_D59900/2
        ```
      operationId: send-chunked-message
      parameters:
        - name: mailbox_id
          in: path
          required: true
          description: The ID of the mailbox
          example: MAILBOX01
          schema:
            type: string
        - in: header
          name: Authorization
          required: true
          description: Authentication headers
          example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
          schema:
            type: string
        - in: path
          name: message_id
          required: true
          description: The ID of the message
          schema:
            type: string
        - in: path
          name: chunkNo
          required: true
          description: The index number of the chunk
          example: 1
          schema:
            type: integer
        - in: header
          name: Content-Type
          required: true
          description: Type of sent content
          example: application/octet-stream
          schema:
            type: string
        - in: header
          name: Mex-Chunk-Range
          required: true
          description: describes which chunk of the range is sent.
          example: '124'
          schema:
            type: string
            format: 'integer:integer'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageID:
                    type: string
                    example: 20200529155357895317_3573F8
                    description: 'Unique message ID, identical to initial Send message endpoint'
                  blockId:
                    type: integer
                    description: chunkNo assigned to the chunk as supplied in the Mex-chunk-range header, maintained for legacy support
        '403':
          description: Authentication failed
      summary: Send chunked message
      tags:
      - Outbox
components:
  parameters:
    mailbox_id:
      name: mailbox_id
      in: path
      required: true
      description: The ID of the mailbox
      example: MAILBOX01
      schema:
        type: string
    message_id:
      in: path
      name: message_id
      required: true
      description: The ID of the message
      schema:
        type: string
    chunkNo:
      in: path
      name: chunkNo
      required: true
      description: The index number of the chunk
      example: 1
      schema:
        type: integer
    AuthorizationHeader:
      in: header
      name: Authorization
      required: true
      description: Authentication headers
      example: 'Authorization: NHSMESH NONFUNC01:jt81ti68rlvta7379p3ng949rv:1:201511201038:3cded68a9e0f9b83f2c5de1b79fc4dac45004523e6658d46145156fa6a03eced'
      schema:
        type: string
    AcceptEncodingHeader:
      in: header
      name: Accept-Encoding
      required: false
      description: client can accept & decompress messages in GZIP format
      example: gzip
      schema:
        type: string
    ContentTypeHeader:
      in: header
      name: Content-Type
      required: true
      description: Type of sent content
      example: application/octet-stream
      schema:
        type: string
    ContentEncodingHeader:
      in: header
      name: Content-Encoding
      required: false
      description: 'The Content-Encoding entity header is used to compress the media-type. When present, its value indicates which encodings were applied to the entity-body. It lets the client know how to decode in order to obtain the media-type referenced by the Content-Type header.'
      example: gzip
      schema:
        type: string
    MexChunkRange:
      in: header
      name: Mex-Chunk-Range
      required: true
      description: describes which chunk of the range is sent.
      example: '124'
      schema:
        type: string
        format: 'integer:integer'
    Mex-ClientVersion:
      in: header
      name: Mex-ClientVersion
      required: true
      description: Client version number
      example: ApiDocs==0.0.1
      schema:
        type: string
    Mex-OSName:
      in: header
      name: Mex-OSName
      required: true
      description: Operating system name
      example: Linux
      schema:
        type: string
    Mex-OSVersion:
      in: header
      name: Mex-OSVersion
      required: true
      description: Operating system version
      example: '#44~18.04.2-Ubuntu'
      schema:
        type: string
    Mex-FileName:
      in: header
      name: Mex-FileName
      required: true
      description: File name
      example: '{Message content should have this file name after receipt}'
      schema:
        type: string
    Mex-From:
      in: header
      name: Mex-From
      required: true
      description: Sending organisation's mailbox ID
      example: '{Sending organisation''s mailbox ID}'
      schema:
        type: string
    Mex-To:
      in: header
      name: Mex-To
      required: true
      description: Recipient mailbox ID
      example: '{Recipient Mailbox ID}'
      schema:
        type: string
    Mex-WorkflowID:
      in: header
      name: Mex-WorkflowID
      required: true
      description: Workflow ID
      example: '{Workflow ID}'
      schema:
        type: string
    workflow_id:
      in: path
      name: workflow_id
      required: true
      description: Workflow ID
      example: '{Workflow ID}'
      schema:
        type: string
    localID:
      in: path
      name: localID
      required: true
      description: Value of Mex-LocalID provided by sender
      example: api-docs-bob-sends-alice-a-chunked-file
      schema:
        type: string
    ods_code:
      in: path
      name: ods_code
      required: true
      description: All health and social care organisations have a unique ODS code
      example: SCREEN2
      schema:
        type: string
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            type: object
    '202':
      description: Accepted
      content:
        application/json:
          schema:
            type: object
            properties:
              messageID:
                type: string
                example: allocatedMessageID
                description: JSON which includes the message ID of the newly created message record.
    '206':
      description: Partial download – Indicates that chunk has been downloaded successfully and that there are further chunks.
      content:
        binary:
          schema:
            type: object
    '300':
      description: Multiple options (The localId provided with the message was not unique)
      content:
        application/json:
          schema:
            type: object
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
    '403':
      description: Authentication failed
    '404':
      description: Message does not exist
      content:
        application/json:
          schema:
            type: object
    '410':
      description: 'Gone, message has already been downloaded'
      content:
        application/json:
          schema:
            type: object
    '417':
      description: Invalid Recipient or the workflow is restricted
      content:
        application/json:
          schema:
            type: object
            properties:
              messageID:
                type: string
                description: ID of the allocated message
              errorEvent:
                type: string
                description: Status event
              errorCode:
                type: integer
                description: Status code
                example: 417
              errorDescription:
                type: string
                description: Description of the status
  securitySchemes: {}
servers:
  - url: 'https://msg.dev.spine2.ncrs.nhs.uk'
    description: Development
  - url: 'https://msg.int.spine2.ncrs.nhs.uk'
    description: Integration
  - url: 'https://msg.intspineservices.nhs.uk'
    description: Integration
  - url: 'https://msg.dep.spine2.ncrs.nhs.uk'
    description: Deployment
  - url: 'https://mesh-sync.national.ncrs.nhs.uk'
    description: Production
  - url: 'https://mesh-sync.spineservices.nhs.uk'
    description: Production
x-spec-publication:
  try-this-api:
    disabled: true
